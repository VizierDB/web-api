"""Objects in the execution environment for data curation workflows. Primarily
intended for use within a PythonCell in a data curation workflow.

The workflow context maintains global variables accessed by the Python cells.

The Vizier datastore client enables access to and manipulation of datasets in a
Vizier datastore from within a python script.
"""

from vizier.core.util import is_valid_name
from vizier.datastore.metadata import DatasetMetadata


"""Context variable name for Vizier DB Client."""
VZR_ENV_VIZIER = 'vizierdb'


class WorkflowContext(object):
    """Context for execution of individual workflows. Maintains a dictionary of
    global variables used by Python cells as well as a mapping of dataset names
    to persistent dataset identifier. Both dictionaries are updated as the
    workflow is executed.

    Attributes
    ----------
    datasets: dict
        Mapping of dataset names to unique persistent dataset identifier
        generated by the data store.
    datastore: vizier.datastore.base.DataStore
        Datastore to access and manipulate datasets
    variables: dict
        Dictionary of global variables for Python cells. Initialized with
        reference to the Vizual engine.
    vizual: vizier.worktrail.vizual.engine.VizualEngine
        Vizual commands execution engine
    """
    def __init__(self, vizual, datastore, datasets=None, variables=None):
        """Initialize the VizUAL engine, dataset mapping and variables
        dictionary.

        Parameters
        ----------
        vizual: vizier.worktrail.vizual.engine.VizualEngine
            Vizual commands execution engine
        datastore: vizier.datastore.base.DataStore
            Datastore to access and manipulate datasets
        datasets: dict, optional
            Initial mapping of datasets
        variables: dict, optional
            Dictionary of global variables for Python cells.
        """
        self.vizual = vizual
        self.datastore = datastore
        # Initialize the dataset mapping
        self.datasets = dict(datasets) if not datasets is None else dict()
        # Create dictionary for Python variables. By default the vizier engine
        # is initialized as variable '__vizierdb__'
        if variables is None:
            self.variables = dict()
        else:
            self.variables = variables
        self.variables[VZR_ENV_VIZIER] = VizierDBClient(self, datastore)

    def get_dataset_identifier(self, name):
        """Returns the unique identifier for the dataset with the given name.

        Raises ValueError if no dataset with the given name exists.

        Parameters
        ----------
        name: string
            Dataset name

        Returns
        -------
        string
        """
        # Datset names should be case insensitive
        key = name.lower()
        if not key in self.datasets:
            raise ValueError('unknown dataset \'' + name + '\'')
        return self.datasets[key]

    def has_dataset_identifier(self, name):
        """Test whether a mapping for the dataset with the given name exists.

        Parameters
        ----------
        name: string
            Dataset name

        Returns
        -------
        bool
        """
        # Dataset names are case insensitive
        return name.lower() in self.datasets

    def remove_dataset_identifier(self, name):
        """Remove the entry in the dataset distionary that is associated with
        the given name. Raises ValueError if not dataset with name exists.

        Parameters
        ----------
        name: string
            Dataset name
        identifier: string
            Unique identifier for persistent dataset
        """
        # Convert name to lower case to ensure that names are case insensitive
        key = name.lower()
        if not key in self.datasets:
            raise ValueError('unknown dataset \'' + name + '\'')
        del self.datasets[key]

    def set_dataset_identifier(self, name, identifier):
        """Sets the identifier to which the given dataset name points.

        Parameters
        ----------
        name: string
            Dataset name
        identifier: string
            Unique identifier for persistent dataset
        """
        # Convert name to lower case to ensure that names are case insensitive
        self.datasets[name.lower()] = identifier


class VizierDBClient(object):
    """The Vizier DB Client provides access to datasets that are identified by
    a unique name.
    """
    def __init__(self, context, datastore):
        """Initialize the reference to the workflow context and the datastore.

        Parameters
        ----------
        context: vizier.worktrail.workflow.context.WorkflowContext
            State of the current workflow context
        datastore: vizier.datastore.base.DataStore
            Data store to access and manipulate datasets
        """
        self.context = context
        self.datastore = datastore

    def create_dataset(self, name, dataset):
        """Create a new dataset with given name.

        Raises ValueError if a dataset with given name already exist.

        Parameters
        ----------
        name : string
            Unique dataset name
        dataset : vizier.datastore.base.Dataset
            Dataset object
        """
        # Raise an exception if a dataset with the given name already exists or
        # if the name is not valid
        if self.context.has_dataset_identifier(name):
            raise ValueError('dataset \'' + name + '\' already exists')
        if not is_valid_name(name):
            raise ValueError('invalid dataset name \'' + name + '\'')
        # Write dataset to datastore and add new dataset to context
        dataset.annotations = DatasetMetadata()
        ds = self.datastore.store_dataset(dataset)
        self.context.set_dataset_identifier(name, ds.identifier)

    def drop_dataset(self, name):
        """Remove the dataset with the given name.

        Raises ValueError if no dataset with given name exist.

        Parameters
        ----------
        name : string
            Unique dataset name
        """
        # Remove the context dataset identifier for the given name. Will raise
        # a ValueError if dataset does not exist
        self.context.remove_dataset_identifier(name)

    def get_dataset(self, name):
        """Get dataset with given name.

        Raises ValueError if the specified dataset does not exist.

        Parameters
        ----------
        name : string
            Unique dataset name

        Returns
        -------
        vizier.datastore.base.Dataset
        """
        # Get identifier for the dataset with the given name. Will raise an
        # exception if the name is unknown
        identifier = self.context.get_dataset_identifier(name)
        # Read dataset from datastore and return it.
        return self.datastore.get_dataset(identifier)
        if dataset is None:
            raise ValueError('unknown dataset \'' + identifier + '\'')
        return dataset

    def rename_dataset(self, name, new_name):
        """Rename an existing dataset.

        Raises ValueError if a dataset with given name already exist.

        Raises ValueError if dataset with name does not exist or if dataset with
        new_name already exists.

        Parameters
        ----------
        name : string
            Unique dataset name
        new_name : string
            New dataset name
        """
        # Raise exception if new_name exists or is not valid.
        if self.context.has_dataset_identifier(new_name):
            raise ValueError('dataset \'' + new_name + '\' exists')
        if not is_valid_name(new_name):
            raise ValueError('invalid dataset name \'' + new_name + '\'')
        # Raise an exception if no dataset with the given name exists
        identifier = self.context.get_dataset_identifier(name)
        self.context.remove_dataset_identifier(name)
        self.context.set_dataset_identifier(new_name, identifier)

    def update_dataset(self, name, dataset):
        """Update a given dataset.

        Raises ValueError if the specified dataset does not exist.

        Parameters
        ----------
        name : string
            Unique dataset name
        dataset : vizier.datastore.base.Dataset
            Dataset object
        """
        # Get identifier for the dataset with the given name. Will raise an
        # exception if the name is unknown
        identifier = self.context.get_dataset_identifier(name)
        # Write dataset to datastore and update context
        ds = self.datastore.store_dataset(dataset)
        self.context.set_dataset_identifier(name, ds.identifier)
